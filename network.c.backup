/**
 *       @file  TTT.c
 *      @brief  
 *
 *   @internal
 *     Created  11/17/2017
 *     Company  LSEC CAS
 *
 * =====================================================================================
 */
#include <stdio.h>
typedef struct NET_ 
{
   int num_node;
   int *num_neighbour;
   int **id_neighbour;
} NET;


int main()
{
   /* 1 0 1 
    * 0 1 1
    * 1 1 1 */
   int nrows = 3;
   int begin_idxes[4] = {0, 2, 4, 7}; 
   int col_nums[7] = {0, 2, 1, 2, 0, 1, 2};
   int nnzs[3] = {2, 2, 3};

   double values[3] = {11.0, 10.0, 20.0};
   int strategy[3] = {0, 0, 0};

   double total[3];
   double rate[3];
   double profit;
   int i, j, k;
   int iter, max_iter;

   iter = 0;
   max_iter = 10;
   while (iter < max_iter)
   {
      for (i = 0; i < nrows; ++i)
      {
	 total[i] = 0;
	 for (k = begin_idxes[i] ; k < begin_idxes[i+1]; ++k)
	 {
	    j = col_nums[k];
	    total[i] += values[j];
	 }
	 rate[i] = values[i] / total[i];
	 if (rate[i]*nnzs[i]>0.8)
	 {
	    strategy[i] = 1;
	 }
	 printf ( "%d : %d, %f, %f, %d\t", i, strategy[i], rate[i], total[i], nnzs[i] );
      }
      printf ( "\n" );

      printf ( "iter = %d\n", iter );
      for (i = 0; i < nrows; ++i)
      {
	 total[i] = 0;
	 for (k = begin_idxes[i] ; k < begin_idxes[i+1]; ++k)
	 {
	    j = col_nums[k];
	    values[j] -= (strategy[j]*1.0);
	    total[i] += strategy[j];
	 }
	 profit = 1.5*1.0*total[i];
	 for (k = begin_idxes[i] ; k < begin_idxes[i+1]; ++k)
	 {
	    j = col_nums[k];
	    rate[j] = strategy[j] / total[i];
	    values[j] += (rate[j]*profit*0.5) + profit*0.5/nnzs[i];
	 }
	 printf ( "%f\t", values[i] );
      }
      printf ( "\n" );

      ++iter;
   }
   for (i = 0; i < nrows; ++i)
   {
      printf ( "%d\t", strategy[i] );
   }
   printf ( "\n" );
   for (i = 0; i < nrows; ++i)
   {
      printf ( "%f\t", values[i] );
   }
   printf ( "\n" );
}
/* -----  end for  ----- */ 

int NetGeneration(int num_node, int **id_neighbours, NET *net)
{

}

int NetGenerationLattice(int size, NET *net)
{

}

int StratergyGeneration(int id, int *strategy, double *payoff, 
      int *id_neighbour, int num_neighbour, int *strategy_neighbour, double **payoff_neighbour,
      double *random_vector)
{
   id_neighbour = ChooseNeighbour(num_neighbour, random_vector);
   flag = ChangeStrategy(id_neighbour, payoff_neighbour, payoff, random_vector+1);
   if (flag == 0)
   {
     strategy[0] = strategy_neighbour[id_neighbour][0];
   }
   return 0;
}

int PayoffGeneration(int id, int *strategy, double *payoff, int *id_neighbour, int num_neighbour, 
      int *strategy_neighbour, double **payoff_neighbour)
{
   /** Prisoners */
   payoff[0] = 0.0;
   for (idx = 0; idx < num_neighbour; ++idx)
   {
      payoff_neighbour[idx][0] = 0.0;
   }
   for (idx = 0; idx < num_neighbour; ++idx)
   {
      switch (strategy[0]){
	 case 0:
	    switch (strategy_neighbour[idx]){
	       case 0:
		  payoff[0] += 1.0;
		  break;
	       case 1:
		  payoff[0] += 0.0;
		  break;
	       default: printf("Error")
	    }
	    break;
	 case 1:
	    switch (strategy_neighbour[idx]){
	       case 0:
		  payoff[0] += 3.0;
		  break;
	       case 1:
		  payoff[0] += 0.0;
		  break;
	       default: printf("Error")
	    }
	    break;
	 default: printf("Error")
      }
   }   /* -----  end for  ----- */ 
   payoff[0] = payoff[0] / num_neighbour;

   
   /** Public */
   payoff[0] = 0.0;
   for (idx = 0; idx < num_neighbour; ++idx)
   {
      payoff_neighbour[idx][0] = 0.0;
   }
   double sum = strategy[0];
   for (idx = 0; idx < num_neighbour; ++idx)
   {
      sum += strategy_neighbour[idx]; 
   }
   pf = sum * 1.1 / (1+num_neighbour);
   for (idx = 0; idx < num_neighbour; ++idx)
   {
      payoff_neighbour[idx][0]
	 = pf - (1-strategy_neighbour[idx])
   }
   payoff[0] = pf - (1-strategy[0]);

   return 0;
}
